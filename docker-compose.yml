services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
      - "9094:9094"
    networks:
      - real-time-net


  binance-stream:
    build:
      context: ./src/ingestion
      dockerfile: ingestion.Dockerfile
    container_name: binance-stream
    depends_on:
      - kafka
    volumes:
      - ./src/ingestion:/app
    command: 
      ["sleep", "infinity"]
      # - ["python", "-u", "./src/makeStream.py"]
    networks:
      - real-time-net


  spark-master:
    build:
      context: .
      dockerfile: spark.Dockerfile
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_DAEMON_MEMORY=1g
    ports:
      - "7077:7077"   # Spark master RPC
      - "8080:8080"   # Spark master UI
    volumes:
      - ./src:/opt/workspace
    networks: [real-time-net]

  spark-worker:
    build:
      context: .
      dockerfile: spark.Dockerfile
    depends_on: [spark-master]
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=4g
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_DAEMON_MEMORY=1g
    ports:
      - "8081:8081"   # Worker 1 UI
    volumes:
      - ./src:/opt/workspace
    networks: [real-time-net]


  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
      POSTGRES_DB: crypto_db
    ports:
      - "5432:5432"
    networks:
      - real-time-net
    volumes:
      - pgdata:/var/lib/postgresql/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: your_grafana_password
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    networks:
      - real-time-net
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  pgdata:
  grafana-storage:

networks:
  real-time-net:
    driver: bridge